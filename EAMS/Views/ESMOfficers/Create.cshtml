@model EAMS.View_Models.ESMDetailsCrtVM

@{
    ViewBag.Title = "Officer Data Entry";
}

<div class="page-body">
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-header">
                    <h5>@ViewBag.Title</h5>
                    <span>
                        This page is used to Add Officer's details
                    </span>
                    <div class="card-header-right">
                        <i class="icofont icofont-rounded-down"></i>
                        <a href="@Url.Action("Index", "ESMOfficers")" title="Click here to close this form"><i class="icofont icofont-arrow-left"></i></a>
                    </div>
                </div>
                <div class="card-block">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="row">
                        <div class='col-sm-4'>
                            <div class='form-group'>
                                @Html.LabelFor(model => model.SbId, "Board", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownList("SbId", (IEnumerable<SelectListItem>)ViewBag.sainik, null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SbId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-4'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CompanyId, "Company", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownList("CompanyId", (IEnumerable<SelectListItem>)ViewBag.Companies, null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-4'>
                            <div class='form-group'>
                                <label for="VacancyId">Vacancy/Post</label>
                                @Html.DropDownList("VacancyId", new SelectList(string.Empty, "Value", "Text"), "Select", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.VacancyId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class='form-group'>
                                @Html.LabelFor(model => model.ServiceType, htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.ServiceType, new List<SelectListItem> { new SelectListItem { Text = "Army", Value = "Army" }, new SelectListItem { Text = "Air Force", Value = "Air Force" }, new SelectListItem { Text = "Navy", Value = "Navy" } }, "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ServiceType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ServiceNo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.ServiceNo, new { htmlAttributes = new { @class = "form-control", placeholder="Service No" } })
                                @Html.ValidationMessageFor(model => model.ServiceNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.RankId, "Rank", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownList("RankId", new SelectList(string.Empty, "Value", "Text"), "--Select Service--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RankId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Name" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.DgrRegistrationNo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.DgrRegistrationNo, new { htmlAttributes = new { @class = "form-control", placeholder = "DGR Registration No" } })
                                @Html.ValidationMessageFor(model => model.DgrRegistrationNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.DateofBirth, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.DateofBirth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateofBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CommisionDate, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CommisionDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CommisionDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.RetirementDate, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.RetirementDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RetirementDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.QualificationId, "Qualification", htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownList("QualificationId", (IEnumerable<SelectListItem>)ViewBag.Qualification, null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QualificationId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Full Address" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Mobile No" } })
                                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <div class="form-group">
                                @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", placeholder = "abc@xyz.com" } })
                                @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" value="Save" class="btn btn-primary m-b-0"><i class="fa fa-save"></i> Save </button>
                            </div>
                        </div>
                    </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
    $(document).ready(function () {
        $("#CompanyId").change(function () {
            $("#VacancyId").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetJobPosts")',
                dataType: 'json',
                data: { companyid: $("#CompanyId").val() },
                success: function (jobpostsdata) {
                    //$("#CityId").append('<option value="' + "0" + '">' + "Select" + '</option>');
                    $.each(jobpostsdata, function (i, posts) {
                        $("#VacancyId").append('<option value="' + posts.Value + '">' + posts.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Job Posts Data.' + ex);
                }
            });
            return false;
        });
        $("#ServiceType").change(function () {
            $("#RankId").empty();
            $.ajax({
                type: 'POST',
                url: 'GetRanks',
                dataType: 'json',
                data: { ServiceType: $("#ServiceType").val() },
                success: function (citydata) {
                    $.each(citydata, function (i, ranks) {
                        $("#RankId").append('<option value="' + ranks.Value + '">' + ranks.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve ranks.' + ex);
                }
            });
            return false;
        });

    });
    </script>
}
